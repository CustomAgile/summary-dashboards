<!DOCTYPE html>
<html>
<head>
    <title>Utilization Chart</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Mon Aug 17 2015 13:39:27 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Aug 17 2015 13:39:27 GMT-0700 (PDT)";
        var CHECKSUM = 48314326036;
    </script>
    
        <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>


    <script type="text/javascript">
        
        if (!window.location.origin) {
            window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');
        }
        
        Rally.onReady(function() {
             
Ext.define('timebox-selector', {
    extend : 'Ext.Container',
    componentCls : 'app',
    alias : 'widget.timebox-selector',
    cls : 'timebox-selector',
    layout : 'hbox',
    width : '100%',
    mixins : [
        'Rally.Messageable'
    ],
    constructor : function()
    {
        this.stateId = Rally.environment.getContext().getScopedStateId('timebox-filter');
        this.callParent(arguments);
    },
    initComponent : function()
    {
        this.callParent(arguments);
        this._createReleaseCombo();
        this.addEvents('releasechange','iterationchange');
        
        // configured to allow others to ask what the current selection is,
        // in case they missed the initial message
        this.subscribe(this, 'requestTimebox', this._requestTimebox, this);
        
    },
    _createReleaseCombo : function()
    {
        this._releaseCombo = this.add({
            xtype : 'rallyreleasecombobox',
            fieldLabel : 'Program Increment',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 130,
            width : 280,
            labelAlign : 'right',
            stateful : false,
            stateId : 'releasecombo',
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            defaultToCurrentTimebox : true,
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var release = t.getRecord();
                    this.fireEvent('releasechange',release);

                    this.publish('timeboxReleaseChanged', release);
                    this._updateIterationCombo(release);
                },
                scope : this
            }
        });
    },
    _updateIterationCombo : function(release)
    {
        this.remove('globaliterationpicker');
        this.fireEvent('iterationchange',null);
        this.publish('timeboxIterationChanged', null);
                    
        var endFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "EndDate",
            operator : "<=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseDate'))
        });
        var startFilter = Ext.create('Rally.data.wsapi.Filter', {
            property : "StartDate",
            operator : ">=",
            value : Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate'))
        });
        var filters = endFilter.and(startFilter);

        this._iterationCombo = this.add({
            xtype : 'rallyiterationcombobox',
            itemId : 'globaliterationpicker',
            fieldLabel : 'Sprint/Iteration',
            hideLabel : false,
            labelPad : 5,
            labelSeparator : ':',
            labelWidth : 100,
            labelAlign : 'right',
            stateful : false,
            padding : 5,
            context : Rally.environment.getContext(),
            showArrows : false,
            growToLongestValue : true,
            stateId : 'iterationcombo',
            allowBlank : true,
            allowClear : true,
            allowNoEntry : true,
            noEntryText : 'PI Scope',
            emptyText : 'PI Scope',
            noEntryValue : null,
            defaultToCurrentTimebox : false,
            defaultSelectPosition : 'first',
            storeConfig : {
                remoteFilter : true,
                filters : filters
            },
            listeners : {
                change : function(t, newVal, oldVal, eOpts)
                {
                    var iteration = t.getRecord();
                    this.fireEvent('iterationchange',iteration);
                    this.publish('timeboxIterationChanged', iteration);
                },
                scope : this
            }
        });
    },
    _requestTimebox : function(source) {
         var release = this.getReleaseRecord();
        if (release) {
            this.publish('timeboxReleaseChanged', release);
        } 
        
        var iteration = this.getIterationRecord();
        if (iteration) {
            this.publish("timeboxIterationChanged",  iteration);
        }
    },
    getReleaseRecord: function(){
        if (this._releaseCombo){
            return this._releaseCombo.getRecord() || null;
        }
        return null;
    },
    getIterationRecord: function(){
        if (this._iterationCombo){
            return this._iterationCombo.getRecord() || null;
        }
        return null;
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});


/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        if ( !Ext.isIE9m ) {
            var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
            var output_args = [];
            output_args = Ext.Array.push(output_args,[timestamp]);
            output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));
    
            window.console && console.log.apply(console,output_args);
        }
    }

});
Ext.define('Rally.technicalservices.ModelBuilder',{
    singleton: true,

    build: function(modelType, newModelName, field_cfgs) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Rally.data.ModelFactory.getModel({
            type: modelType,
            success: function(model) {

                var default_fields = [{
                    name: '__startScope',
                    displayName: 'Start Stability'
                },{
                    name: '__endScope',
                    displayName: 'End Stability'
                },{
                    name: '__endAcceptance',
                    displayName: 'End Acceptance'
                },{
                    name: '__NDaysAfter',
                    defaultValue: 0
                },{
                    name: '__days',
                    convert: function(value, record){
                        // this is an array of dates (end of the day) that the daily fields correspond to
                        if ( Ext.isEmpty(record.get('StartDate')) ) {
                            return [];
                        }
                        if ( Ext.isEmpty(record.get('EndDate')) ) {
                            return [];
                        }
                        
                        var first_day = Rally.util.DateTime.add(Rally.util.DateTime.add(record.get('StartDate'),'day', 1),'second',-1);
                        var last_day = record.get('EndDate');
                        var array_of_days = [];
                        var check_day = first_day;
                        while ( check_day <= last_day ) {
                            array_of_days.push(check_day);
                            check_day = Rally.util.DateTime.add(check_day,'day',1);
                        }
                        return array_of_days;
                    },
                    displayName: 'Days'
                },{
                    name: '__dailyScope',
                    defaultValue:  [],
                    displayName: 'Daily Stability'
                },{
                    name: '__dailyAcceptance',
                    defaultValue: [],
                    displayName: 'Daily Acceptance'
                }];
                
                var fields = Ext.Array.merge(default_fields, field_cfgs);
                var new_model = Ext.define(newModelName, {
                    extend: model,
                    fields: fields,
                    setCFD: me._setCFD,
                    setStragglers: me._setStragglers
                });
                deferred.resolve(new_model);
            }
        });

        return deferred;
    },
    
    // sometimes, dates are provided as beginning of day, but we 
    // want to go to the end of the day
    shiftToEndOfDay: function(js_date) {
        return Rally.util.DateTime.add(Rally.util.DateTime.add(js_date,'day',1),'second',-1);
    },
    
    isAccepted: function(state) {
        return ( state == 'Accepted' );
    },
    
    _setCFD: function(cfd_array) {
        var days = this.get('__days');
        
        var my_oid = this.get('ObjectID');
        
        // set scope to nulls every day
        var daily_scope = Ext.Array.map( days, function(day){ return null; });
        var daily_acceptance = Ext.Array.map( days, function(day){ return null; });
        
        var total_by_day = {};
        var acceptance_by_day = {};
        
        Ext.Array.each(cfd_array, function(cfd){
            var cfd_oid = cfd.get('IterationObjectID');
            
            if ( Ext.isEmpty(cfd_oid) || Ext.isEmpty(my_oid) || my_oid == cfd_oid ) {
                
                var card_total = cfd.get('CardEstimateTotal') || 0;
                var day = Rally.technicalservices.ModelBuilder.shiftToEndOfDay(cfd.get('CreationDate'));
                
                if (!total_by_day[day]) { total_by_day[day] = 0; }
                
                total_by_day[day] += card_total;

                if ( Rally.technicalservices.ModelBuilder.isAccepted(cfd.get('CardState')) ) {
                    if (!acceptance_by_day[day]) { acceptance_by_day[day] = 0; }
                    acceptance_by_day[day] += card_total;
                }
            }
        });

        Ext.Array.each(days, function(day,idx){
            if ( total_by_day[day] ) {
                daily_scope[idx] = total_by_day[day];
            }
            if ( acceptance_by_day[day] ) {
                daily_acceptance[idx] = acceptance_by_day[day];
            }
        });
        
        this.set('__dailyScope',daily_scope);
        if ( daily_scope.length > 0 ) {
            this.set('__startScope',daily_scope[0]);
            this.set('__endScope',daily_scope[daily_scope.length - 1]);
        }
        
        this.set('__dailyAcceptance',daily_acceptance);
        if ( daily_acceptance.length > 0 ) {
            this.set('__endAcceptance',daily_acceptance[daily_acceptance.length - 1]);
        }
    },
    _setStragglers: function(artifacts, num_extra_days){
        var late_acceptance_points = 0,
            my_oid = this.get('ObjectID'),
            start_date = this.get('EndDate'),
            end_date = Rally.util.DateTime.add(start_date, 'day', num_extra_days);

        this.set('__NDaysAfter', num_extra_days || 0);

        Ext.Array.each(artifacts, function(a){
            if (a.get('Iteration').ObjectID ==  my_oid ){
                if (a.get('AcceptedDate') > start_date && a.get('AcceptedDate') <= end_date){
                    late_acceptance_points += (a.get('PlanEstimate') || 0);
                }
            }
        });

        if (late_acceptance_points > 0){
            var end_acceptance = this.get('__endAcceptance');
            this.set('__endAcceptance', end_acceptance + late_acceptance_points);
        }
    }
});
Ext.define('Rally.technicalservices.chart.Utilization',{
    extend: 'Rally.ui.chart.Chart',
    alias: 'widget.tsutilizationchart',

    /**
     * __startScope
     * __endScope
     * __days
     * __endAcceptance
     * __dailyScope
     * __dailyAcceptance
     * Name
     * Project
     * StartDate
     * EndDate
     * PlannedVelocity
     *
     * For each project, graphs:
     *   __dailyScope
     *   __dailyAcceptance
     *
     */
    config: {

        loadMask: false,

        chartData: {
            series: []
        },
        chartConfig: {

            colors: [ '#2f7ed8', '#8bbc21', '#910000',
            '#492970', '#f28f43', '#145499','#77a1e5', '#c42525', '#a6c96a',
            '#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9','#aa1925',
            '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1','#1aadce',
            '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',
            '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],

            chart: {
                height: 300
            },
            title: {
                text: '',
                align: 'center'
            },
            legend: {
                enabled: false
            },
            xAxis: {
                categories:  [],
                title: { text: 'Days' }
            },
            yAxis: [{
                title: { text: 'Points' },
                min: 0
            }],
            plotOptions: {}
        },

        records: undefined,

        zoomToIteration: true

    },
    stateHidden: {},
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    initComponent: function() {
        this.addEvents('legendupdated');
        this.callParent(arguments);

        if (this.zoomToIteration){
            this._initIterationChart();
        } else {
            this._initReleaseChart();
        }
    },
    toggleColor: function(color){

        var colorHidden = this.stateHidden[color] === true;

        _.each(this.getChart().series, function(s){
            if (s && s.color == color){
                var shapeHidden = this.stateHidden[s.symbol] == true;
                if (colorHidden === true){
                    if (shapeHidden != true){
                        s.show();
                    }
                } else {
                    s.hide();
                }
                this.stateHidden[color] = !colorHidden;
            }
        }, this);
    },
    toggleShape: function(shape){
        var shapeHidden = this.stateHidden[shape] === true;
        _.each(this.getChart().series, function(s){
            if (s && s.symbol == shape){
                var colorHidden = this.stateHidden[s.color] == true;
                if (shapeHidden === true){
                    if (colorHidden != true){
                        s.show();
                    }
                } else {
                    s.hide();
                }
                this.stateHidden[shape] = !shapeHidden;
            }
        }, this);
    },
    _initIterationChart: function(){

        var categories = _.map(this.records[0].get('__days'), function(d){
            return Rally.util.DateTime.format(d, 'M-d')
        });

        var stragglers = this.records[0].get('__NDaysAfter');


        if (stragglers > 0){
            var straggler_date = Rally.util.DateTime.add(this.records[0].get('__days')[categories.length-1], 'day', stragglers);
            categories.push(Ext.String.format('{1}<br/>(+{0} days)', stragglers, Rally.util.DateTime.format(straggler_date, 'M-d')));
        }

        var series = [],
            colors = this.chartConfig.colors,
            color_index = 0;

        _.each(this.records, function(r){

            var daily_acceptance = this._padArray(r.get('__dailyAcceptance'), categories.length),
                daily_scope = this._padArray(r.get('__dailyScope'), categories.length),
                planned_velocity = this._padArray([], categories.length, r.get('PlannedVelocity'));

            if (stragglers){
                var last_index = categories.length - 1;
                daily_acceptance[last_index] = r.get('__endAcceptance');
                daily_scope[last_index] = daily_scope[last_index-1];
            }

            series.push({
                name: r.getField('__dailyAcceptance').displayName,
                data: daily_acceptance,
                color: colors[color_index],
                marker: { symbol:'triangle-down'}
            });

            series.push({
                name: r.getField('__dailyScope').displayName,
                data: daily_scope,
                color: colors[color_index],
                marker: { symbol:'circle'}
            });

            series.push({
                name: r.getField('PlannedVelocity').displayName,
                data: planned_velocity,
                color: colors[color_index],
                marker: { symbol:'square'}
            });

            r.set('__seriesColor', colors[color_index]);
            r.set('__color', colors[color_index]);

            color_index++;
        }, this);

        this.chartConfig.xAxis.categories = categories;
        this.chartData.series = series;
        this.chartData.categories = categories;

        this.fireEvent('legendupdated', series);
    },

    _padArray: function(array, desired_length,padding_value){
        var new_array = Ext.clone(array);
        padding_value = padding_value || null;
        while (new_array.length < desired_length){
            new_array.push(padding_value);
        }
        return new_array;
    },
    _initReleaseChart: function(){

        var series = [],
            colors = this.chartConfig.colors,
            color_index = 0,
            project_hash = {},
            sorted_records = _.sortBy(this.records, function(r){
                return r.get('StartDate');
            }),
            iterations = [];

        _.each(sorted_records, function(r) {
            var project_oid = r.get('Project').ObjectID,
                iteration_name = r.get('Name');

            if (!Ext.Array.contains(iterations, iteration_name)){
                iterations.push(iteration_name);
            }

            if (project_hash[project_oid] == undefined) {
                project_hash[project_oid] = {};
            }
            project_hash[project_oid][iteration_name] = r;
        });

        _.each(project_hash, function(obj, project_oid){

            var start_scope_data = _.map(iterations, function(i){return obj[i] ? obj[i].get('__startScope') || null : null;}),
                end_scope_data = _.map(iterations, function(i){return obj[i] ? obj[i].get('__endScope') || null : null;}),
                end_acceptance_data = _.map(iterations, function(i){return obj[i] ? obj[i].get('__endAcceptance') || null : null;}),
                planned_velocity = _.map(iterations, function(i){return obj[i] ? obj[i].get('PlannedVelocity') || null : null;});

            series.push({
                name: "End Acceptance", //obj[0].getField('__endAcceptance').displayName,
                data: end_acceptance_data,
                color: colors[color_index],
                marker: { symbol:'triangle-down'}
            });

            series.push({
                name: "End Stability", //obj.getField('__endScope').displayName,
                data: end_scope_data,
                color: colors[color_index],
                marker: { symbol:'circle'}
            });

            series.push({
                name: "Start Stability", //obj.getField('__startScope').displayName,
                data: start_scope_data,
                color: colors[color_index],
                marker: { symbol:'circle' , fillColor: '#FFFFFF', lineColor: colors[color_index], lineWidth: 2}
            });

            series.push({
                name: "Potential", //obj.getField('PlannedVelocity').displayName,
                data: planned_velocity,
                color: colors[color_index],
                marker: { symbol:'square'}
            });

            //Now set the colors in the records
            _.each(obj, function(r, i){
                r.set('__seriesColor', colors[color_index]);
                r.set('__color', colors[color_index]);
            });
            color_index++;
        });

        this.chartConfig.xAxis.categories = iterations;
        this.chartData.series = series;
        this.chartData.categories = iterations;
        this.chartConfig.xAxis.title.text = "Iteration";

        this.fireEvent('legendupdated', series);
    },
    //Overriding this function because we want to set colors ourselves.
    _setChartColorsOnSeries: function (series) {
        return null;
    }
});

Ext.define('Rally.technicalservices.grid.Legend', {
    extend: 'Rally.ui.grid.Grid',
    alias: 'widget.tslegendgrid',
    config: {
        series: undefined,
        columnCfgs: [],
        showRowActionsColumn: false,
        enableBulkEdit: false,
        padding: 10
    },
    columnHidden: {},
    rowHidden: {},
    constructor: function (config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    initComponent: function () {
        var pageSize = Math.max(this.records.length, 200);
        this.store = Ext.create('Rally.data.custom.Store',{
            data: this.records,
            pageSize: pageSize
        });
        this.columnCfgs = this._getColumnCfgs();
        this.pageSize = pageSize;
        this.showPagingToolbar = pageSize > 200;

        this.addEvents('colorclicked','shapeclicked');
        this.callParent(arguments);

        this.headerCt.on('headerclick', this._onHeaderClick, this);
    },
    _onHeaderClick: function(header, col, e, t){
        if (col.shape){
            this.fireEvent('shapeclicked', col.shape);

            this.toggleColumnState(col.shape);
        }
    },
    toggleRowState: function(rowIndex) {
        var is_hidden = (this.rowHidden[rowIndex] == true),
            color = is_hidden ? "#000000" : "#c6c6c6",
            row_color = this.getStore().getAt(rowIndex).get('__color'),
            rows = this.getStore().getCount();

        for (var j=0; j<rows; j++){
            var r_color = this.getStore().getAt(j).get('__color');
            if (r_color == row_color){
                for (var i=0; i< this.columns.length; i++){
                    if (this.columnHidden[this.columns[i].dataIndex] != true){
                        var cell = this.getView().getCell(j,this.columns[i]);
                        if (cell) {
                            Ext.fly(cell).setStyle("color",color);
                        }
                    }
                }
                this.rowHidden[j] = !is_hidden;
            }
        }
    },

    toggleColumnState: function(shape){

        var rows = this.getStore().getCount();

        var cols = [];
        _.each(this.columns, function(col){
            if (col.shape == shape){
                cols.push(col);
            }
        });

        for (var j=0; j<cols.length; j++){
            var is_hidden = (this.columnHidden[cols[j].dataIndex] == true),
                color = is_hidden ? "#000000" : "#c6c6c6";

            for (var i=0; i< rows; i++){
                if (this.rowHidden[i] != true){
                    var cell = this.getView().getCell(i,cols[j]);
                    if (cell) {
                        Ext.fly(cell).setStyle("color",color);
                    }
                }
            }
            this.columnHidden[cols[j].dataIndex] = !is_hidden;
        }
    },
    _getColumnCfgs: function(){
        var me = this;

        return [{
            xtype:'actioncolumn',
            dataIndex: '__color',
            width: 24,
            handler: function(grid, rowIndex, colIndex, item) {
                var rec = grid.getStore().getAt(rowIndex);
                if (rec.get('__colorHidden')){
                    rec.set('__colorHidden',false);
                } else {
                    rec.set('__colorHidden',true);
                }
                me.toggleRowState(rowIndex, rec.get('__colorHidden') );
                me.fireEvent('colorclicked', rec);
            },
            renderer: function(v, m, r){
                m.style = "background-color:" + r.get('__color');
                m.tdCls = "grid-legend-show-action"
            }
        },{
            dataIndex: 'Project',
            text: 'Project',
            flex: 3,
            renderer: this._projectNameRenderer
        },{
            dataIndex: 'Name',
            flex: 2,
            text: 'Iteration'
        },{
            dataIndex:'StartDate',
            text:'Start',
            flex: 2,
            renderer: this._dateRenderer
        },{
            dataIndex:'EndDate',
            text:'End',
            flex: 2,
            renderer: this._dateRenderer
        },{
            dataIndex:'PlannedVelocity',
            text:'&#9724;&nbsp;&nbsp;Potential (Planned)',
            flex: 1,
            //editor: 'rallynumberfield',
            sortable: false,
            shape: 'square'
        },{
            dataIndex:'__startScope',
            flex: 1,
            text:'&#9675;&nbsp;&nbsp;Points at Start (Stability)',
            sortable: false,
            shape: 'circle'
        },{
            dataIndex:'__endScope',
            flex: 1,
            text:'&#9679;&nbsp;&nbsp;Points at End (Stability)',
            sortable: false,
            shape: 'circle'
        },{
            dataIndex:'__endAcceptance',
            flex: 1,
            text:'&#9660;&nbsp;&nbsp;Accepted at End',
            sortable: false,
            shape: 'triangle-down'
        }];
     },
    _dateRenderer: function(value){
        //todo make ordinals
        return Ext.util.Format.date(value,'Y-m-d');
    },
    
    _projectNameRenderer: function(value) {
        if ( !Ext.isEmpty(value) ) {
            var name_array = value.Name.split('>');
            return name_array[name_array.length - 1];
        }
        
        return value;
    },
    
    _objectNameRenderer: function(value){
        if (value && value.Name){
            return value.Name;
        }
        return value;
    }
});
Ext.define('Rally.technicalservices.RollupToolbox',{
    singleton: true,
    rollUpData: function(iterations) {

        var logger = new Rally.technicalservices.Logger(),
            leaves = Ext.Array.filter(iterations, function(iteration){
            var project = iteration.get('Project');
            if ( project && project.Children && project.Children.Count == 0 && project.Parent ) {
                return true;
            }
            return false;
        });
        logger.log("Leaf project iterations: ", leaves);

        var project_iteration_hash = {};
        Ext.Array.each(iterations, function(iteration) {
            var project = iteration.get('Project');
            if (Ext.isEmpty(project_iteration_hash[project.ObjectID])){
                project_iteration_hash[project.ObjectID] = {};
            }
            project_iteration_hash[project.ObjectID][iteration.get('Name')] = iteration;
        },this);

        logger.log('project_iteration_hash', project_iteration_hash);
        while ( leaves.length > 0 ) {
            var parent_iterations = [];

            Ext.Array.each(leaves, function(leaf) {
                var iteration_name = leaf.get('Name'),
                    parent_project = leaf.get('Project').Parent;

                    if (parent_project && project_iteration_hash[parent_project.ObjectID] && project_iteration_hash[parent_project.ObjectID][iteration_name]){

                        var parent_iteration = project_iteration_hash[parent_project.ObjectID][iteration_name];
                        parent_iterations = Ext.Array.merge(parent_iterations, [parent_iteration]);

                        this._setValuesForParent(leaf,parent_iteration,'PlannedVelocity');
                        this._setValuesForParent(leaf,parent_iteration,'__startScope');
                        this._setValuesForParent(leaf,parent_iteration,'__endScope');
                        this._setValuesForParent(leaf,parent_iteration,'__endAcceptance');

                        this._setArrayValuesForParent(leaf,parent_iteration,'__dailyScope');
                        this._setArrayValuesForParent(leaf,parent_iteration,'__dailyAcceptance');
                }
            },this);
            logger.log('parents:', parent_iterations);
            leaves = parent_iterations;
        }
        return iterations;
    },

    _setArrayValuesForParent: function(leaf, parent,rollup_field) {
        if (! parent ) {
            return null;
        }

        var parent_values = parent.get(rollup_field) || [],
            leaf_values = leaf.get(rollup_field) || [],
            new_values = [];

        Ext.Array.each(leaf_values, function(leaf_value,idx){
            var value = leaf_value || 0;
            if ( idx < parent_values.length ) {
                var parent_value = parent_values[idx] || 0;
                new_values.push(value + parent_value);
            } else {
                new_values.push(leaf_value);
            }
        });
        parent.set(rollup_field, new_values);

        return parent;
    },

    _setValuesForParent: function(leaf,leaf_parent,field) {
        if (! leaf_parent) {
            return null;
        }

        var parent_value = leaf_parent.get(field) || 0;
        var leaf_value = leaf.get(field) || 0;

        leaf_parent.set(field, parent_value + leaf_value);
        return leaf_parent;
    }
});

Ext.define("utilization-chart", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'settings_box'},
        {xtype:'container',itemId:'selector_box'},
        {xtype:'container',itemId:'chart_box', margin: 5, padding: 10, flex: 1},
        {xtype:'container',itemId:'grid_box',  margin: 5, padding: 10, flex: 1},
        {xtype:'tsinfolink'}
    ],

    config: {
        defaultSettings: {
            zoomToIteration:  true,
            includeItemsAcceptedAfterNDays: 0
        }
    },
    
    launch: function() {
        
        if (this.isExternal()){
            this.showSettings(this.config);
        } else {
            this.onSettingsUpdate(this.getSettings());
        }
    },
    
    _launch: function(settings) {
        var me = this;
        
        this.logger.log("Settings:", settings);
        
        if ( settings.showScopeSelector == true || settings.showScopeSelector == "true" ) {
            this.down('#selector_box').add({
                xtype : 'timebox-selector',
                context : this.getContext(),
                listeners: {
                    releasechange: function(release){
                        this._changeRelease(release);
                    },
                    iterationchange: function(iteration){
                        this._changeIteration(iteration);
                    },
                    scope: this

                }
            });
        } else {
            this.subscribe(this, 'timeboxReleaseChanged', this._changeRelease, this);
            this.subscribe(this, 'timeboxIterationChanged', this._changeIteration, this);

            this.publish('requestTimebox', this);
        }
    },
    
    _changeRelease: function(release) {
        var me = this;
        var settings = this.getSettings(),
            zoom_to_iteration = settings.zoomToIteration == true || settings.zoomToIteration == "true" ;
        this.logger.log("Release Changed:", release);

        if ( zoom_to_iteration == false || zoom_to_iteration == "false" ) {
            var startDate = Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate')),
                endDate = Rally.util.DateTime.toIsoString(release.get('ReleaseDate'));

            Rally.technicalservices.ModelBuilder.build('Iteration','Utilization',[]).then({
                scope: this,
                success: function(model){

                    var filter = [{property:'StartDate', operator: "<", value: endDate},
                                    {property: 'EndDate', operator: ">", value: startDate}];
                    var fields = ['Name','EndDate','StartDate','PlannedVelocity','Project','Parent','Children','ObjectID'];
                    var sorters = [{property:'EndDate', direction:'ASC'}];

                    Deft.Chain.pipeline([
                        function() {
                            return me._loadAStoreWithAPromise(model, fields, filter, sorters);
                        },
                        function(iterations) {
                            me.setLoading('Loading Cumulative Flow Data...');
                            return me._associateCFDsWithIterations(iterations, startDate, endDate);
                        },
                        function(iterations) {
                            me.setLoading('Loading post iteration acceptances...');
                            var start_date = Rally.util.DateTime.toIsoString(iterations[0].get('EndDate'));  //This is why we added sorters....
                            var end_date = Rally.util.DateTime.toIsoString(iterations[iterations.length-1].get('EndDate'));
                            return me._associateStragglersWithIterations(settings.includeItemsAcceptedAfterNDays, iterations, start_date, end_date);
                        }
                    ]).then({
                        scope: me,
                        success: function(calculated_iterations) {
                            me.logger.log('Iterations: ', calculated_iterations);
                            var rolled_up_iterations = Rally.technicalservices.RollupToolbox.rollUpData(calculated_iterations);
                            var filtered_iterations = this._filterOutDistantProjects(rolled_up_iterations);

                            me.setLoading(false);

                            me._buildChart(filtered_iterations, zoom_to_iteration);
                            me._buildGrid(filtered_iterations, zoom_to_iteration);
                        },
                        failure: function(msg) {
                            Ext.Msg.alert('!', msg);
                        }
                    });
                }
            }).always(function() { me.setLoading(false); });
        }
    },
    
    _changeIteration: function(iteration) {
        var me = this;
        var settings = this.getSettings(),
            zoom_to_iteration = settings.zoomToIteration == true || settings.zoomToIteration == "true" ;
        this.logger.log("Iteration changed:", iteration);
        
        if ( !Ext.isEmpty(iteration) && zoom_to_iteration) {
            
            me.setLoading('Loading iteration ' + iteration.get('Name') );
            
            Rally.technicalservices.ModelBuilder.build('Iteration','Utilization',[]).then({
                scope: this,
                success: function(model){
                    var name = iteration.get('Name');
                    var filter = [{property:'Name',value: name}];
                    var fields = ['Name','EndDate','StartDate','PlannedVelocity','Project','Parent','Children','ObjectID'];

                    Deft.Chain.pipeline([
                        function() { 
                            return me._loadAStoreWithAPromise(model, fields, filter ); 
                        }, 
                        function(iterations) { 
                            me.setLoading('Loading Cumulative Flow Data...');
                                var start_date = Rally.util.DateTime.toIsoString(iterations[0].get('StartDate'));
                                var end_date   = Rally.util.DateTime.toIsoString(iterations[0].get('EndDate'));
                            return me._associateCFDsWithIterations(iterations, start_date, end_date);
                        },
                        function(iterations) {
                            me.setLoading('Loading post iteration acceptances...');
                            var start_date = Rally.util.DateTime.toIsoString(iterations[0].get('EndDate'));
                            var end_date   = Rally.util.DateTime.toIsoString(iterations[0].get('EndDate'));
                            return me._associateStragglersWithIterations(settings.includeItemsAcceptedAfterNDays,iterations, start_date, end_date);
                        }
                    ]).then({
                        scope: me,
                        success: function(calculated_iterations) {
                            me.logger.log('Iterations: ', calculated_iterations);
                            var rolled_up_iterations = Rally.technicalservices.RollupToolbox.rollUpData(calculated_iterations);
                            var filtered_iterations = this._filterOutDistantProjects(rolled_up_iterations);

                            me.setLoading(false);
                            
                            me._buildChart(filtered_iterations, zoom_to_iteration);
                            me._buildGrid(filtered_iterations, zoom_to_iteration);
                        },
                        failure: function(msg) {
                            Ext.Msg.alert('!', msg);
                        }
                    });
                }
            }).always(function() { me.setLoading(false); });
        }
    },
    getChart: function(){
        return this.down('tsutilizationchart');
    },
    _buildChart: function(iterations, zoom_to_iteration){
        var me = this;

        this.down('#chart_box').removeAll();
        this.down('#grid_box').removeAll();

        this.down('#chart_box').add({
            xtype: 'tsutilizationchart',
            records: iterations,
            zoomToIteration: zoom_to_iteration
        });
    },
    _buildGrid: function(iterations, zoom_to_iteration){
        var grid = this.down('#grid_box').add({
            xtype: 'tslegendgrid',
            records: iterations,
            listeners: {
                scope: this,
                colorclicked: function(record){
                    this.getChart().toggleColor(record.get('__color'))
                },
                shapeclicked: function(shape ) {
                    this.getChart().toggleShape(shape);
                }
            }
        });
    },
    
    _associateCFDsWithIterations: function(iterations, start_date, end_date) {
        var deferred = Ext.create('Deft.Deferred');
        
        var fetch_fields =  ['CardEstimateTotal','CardState','CreationDate','IterationObjectID'];
    //    var start_date = Rally.util.DateTime.toIsoString(iterations[0].get('StartDate'));
    //    var end_date   = Rally.util.DateTime.toIsoString(iterations[0].get('EndDate'));
        
        var filters = [
            {property: 'CreationDate', operator: '>=', value:start_date},
            {property: 'CreationDate', operator: '<=', value:  end_date}
        ];
        
        this._loadAStoreWithAPromise('IterationCumulativeFlowData', fetch_fields, filters ).then({
            success: function(cfds) {
                Ext.Array.each(iterations, function(iteration){
                    iteration.setCFD(cfds);
                });
                deferred.resolve(iterations);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    _associateStragglersWithIterations: function(includeItemsAcceptedAfterNDays, iterations, start_date, end_date){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('_associateStragglersWithIterations', includeItemsAcceptedAfterNDays, start_date, end_date);
        if (isNaN(includeItemsAcceptedAfterNDays) ||  includeItemsAcceptedAfterNDays <= 0){
            deferred.resolve(iterations);
        } else {
            var fetch_fields =  ['Iteration','AcceptedDate','PlanEstimate','Project','ObjectID','Name'];

            var adjusted_end_date = Rally.util.DateTime.add(Rally.util.DateTime.fromIsoString(end_date), 'day', includeItemsAcceptedAfterNDays);
            var filters = [
                {property: 'AcceptedDate', operator: '>=', value: start_date},
                {property: 'AcceptedDate', operator: '<=', value: Rally.util.DateTime.toIsoString(adjusted_end_date)},
                {property: 'Iteration', operator: '!=', value: null}
            ];

            var store = Ext.create('Rally.data.wsapi.artifact.Store', {
                models: ['Defect', 'UserStory'],
                fetch: fetch_fields,
                filters: filters,
                limit: 'Infinity',
                context: {
                    project: this.getContext().getProject()._ref,
                    projectScopeDown: true
                }
            });

            store.load({
                scope: this,
                callback: function(records, operation, success){
                    if (success){
                        Ext.Array.each(iterations, function(iteration){
                            iteration.setStragglers(records, includeItemsAcceptedAfterNDays);
                        });
                        deferred.resolve(iterations);
                    } else {
                        deferred.reject('Failed to load post iteration accepted artifacts:  ' + operation.error.errors.join(','));
                    }
                }
            });
        }
        return deferred.promise;
    },
    _filterOutDistantProjects: function(iterations){
        var current_project_oid = this.getContext().getProject().ObjectID,
            project_scope_down = this.getContext().getProjectScopeDown();

        var filtered_iterations = Ext.Array.filter(iterations, function(iteration){
            var parent = iteration.get('Project').Parent,
                project_oid = iteration.get('Project').ObjectID;

            if (current_project_oid == project_oid){ return true; }

            if ( !parent || !project_scope_down ) { return false; }
            
            return (parent.ObjectID == current_project_oid ) ;
        });
        
        if ( filtered_iterations.length > 0 ) {
            return filtered_iterations;
        }
        return iterations;
    },

    _loadAStoreWithAPromise: function(model, model_fields, filters, sorters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        sorters = sorters || [];

        this.logger.log("Starting load:",model,model_fields, filters);
          
        var store = Ext.create('Rally.data.wsapi.Store', {
            model: model,
            fetch: model_fields,
            filters: filters,
            limit: 'Infinity',
            sorters: sorters,
            context: {
                project: this.getContext().getProject()._ref,
                projectScopeDown: true
            }
        }).load({
            callback : function(records, operation, successful) {                
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

     /********************************************
     /* Overrides for App class
     /*
     /********************************************/
    //getSettingsFields:  Override for App
    getSettingsFields: function() {
        var me = this;

        return [ 
            {
                name: 'showScopeSelector',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 200',
                boxLabel: 'Show Scope Selector<br/><span style="color:#999999;"><i>Tick to use this to broadcast settings.</i></span>'
            },
            {
                name: 'zoomToIteration',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 200',
                boxLabel: 'Show by Iteration<br/><span style="color:#999999;"><i>If <strong>not</strong> ticked, show by iterations in the selected release.</i></span>'
            },
            {
                name: 'includeItemsAcceptedAfterNDays',
                xtype: 'rallynumberfield',
                fieldLabel: 'Include Stories Accepted within N days after the timebox end',
                labelAlign: 'top',
                margin: '0 0 25 200',
                labelWidth: 300
            }
        ];
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //showSettings:  Override
    showSettings: function(options) {
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            fields: this.getSettingsFields(),
            settings: this.getSettings(),
            defaultSettings: this.getDefaultSettings(),
            context: this.getContext(),
            settingsScope: this.settingsScope,
            autoScroll: true
        }, options));

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        if (this.isExternal()){
            if (this.down('#settings_box').getComponent(this._appSettings.id)==undefined){
                this.down('#settings_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    
    _onSettingsSaved: function(settings){
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this._launch(settings);
    }
});

            
               Rally.launchApp('utilization-chart', {
                   name: 'Utilization Chart'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.grid-legend-show-action {
    width: 18px;
    height: 18px;
    border-radius: 3px;
    text-align: center;
    color: white;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}

.x-grid-row .row-hidden {
    color: '#c9c9c9';
}

.x-grid-row .row-visible {
    color: '#000000';
}
.triangle-down {
    font-family: 'Pictofont';
    content: icon-chevron-down;
}
    </style>

</head>
<body></body>
</html>